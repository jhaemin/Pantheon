{
  // Place your atelier-studio workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Node Component": {
    "scope": "typescriptreact",
    "prefix": "nodeComponent",
    "body": [
      "import { ${NodeName} } from '@atelier/blue'",
      "import { ${NodeName}Node, NodeComponentProps } from '@/types/node.types'",
      "import { useStore } from '@nanostores/react'",
      "",
      "export function ${NodeName}NodeComponent({ \\$node, ...commonNodeProps }: NodeComponentProps<${NodeName}Node>) {",
      "  const { props } = useStore(\\$node)",
      "",
      "  return <${NodeName} {...commonNodeProps} {...props}></${NodeName}>",
      "}",
    ],
  },

  "Drawer Item": {
    "scope": "typescriptreact",
    "prefix": "drawerItem",
    "body": [
      "import { ${NodeName} } from '@atelier/blue'",
      "import { DrawerItemWrapper } from './shared/DrawerItemWrapper'",
      "",
      "export function Drawer${NodeName}() {",
      "  return (",
      "    <DrawerItemWrapper nodeName=\"${NodeName}\">",
      "      <${NodeName} />",
      "    </DrawerItemWrapper>",
      "  )",
      "}",
    ],
  },

  "New Node": {
    "scope": "typescriptreact",
    "prefix": "newNode",
    "body": [
      "import { DrawerItemWrapper } from '@/drawer/drawer-items/shared/DrawerItemWrapper'",
      "import { makeLeafNodeAtom } from '@/node-lib'",
      "import { CommonNode, NodeAtom } from '@/node-types'",
      "import { ${1:NodeName}, ${1:NodeName}Props } from '@atelier/blue'",
      "import { useStore } from '@nanostores/react'",
      "",
      "export type ${1:NodeName}Node = CommonNode & {",
      "  name: '${1:NodeName}'",
      "  props: ${1:NodeName}Props",
      "}",
      "",
      "export function create${1:NodeName}Node(): NodeAtom<${1:NodeName}Node> {",
      "  const \\$node = makeLeafNodeAtom('${1:NodeName}', {",
      "    props: {$2}",
      "  })",
      "",
      "  return \\$node",
      "}",
      "",
      "export function ${1:NodeName}DrawerItem() {",
      "  return (",
      "    <DrawerItemWrapper nodeName=\"${1:NodeName}\">",
      "      <${1:NodeName} $3 />",
      "    </DrawerItemWrapper>",
      "  )",
      "}",
      "",
      "export function ${1:NodeName}NodeComponent({ \\$node }: { \\$node: NodeAtom<${1:NodeName}Node> }) {",
      "  const { props } = useStore(\\$node)",
      "",
      "  return <${1:NodeName} {...props} />",
      "}",
      "",
      "export function ${1:NodeName}NodeControls({ \\$node }: { \\$node: NodeAtom<${1:NodeName}Node> }) {",
      "  const { props } = useStore(\\$node)",
      "",
      "  return null",
      "}",
      "",
      "export function generate${1:NodeName}SourceCode(\\$node: NodeAtom<${1:NodeName}Node>): string {",
      "  return ''",
      "}",
    ],
  },
}
